// this is for a 16x32 RGB LED panel driven by a 16mhz Arduino
// Adafruit.com has links to the two libraries required
// the goal is to have a 40hz refresh rate as per:
// http://news.mit.edu/2016/visual-stimulation-treatment-alzheimer-1207

#include <Adafruit_GFX.h>   // Core graphics library
#include <RGBmatrixPanel.h> // Hardware-specific library

#define CLK 8  // MUST be on PORTB! (Use pin 11 on Mega)
#define LAT A3
#define OE  9
#define A   A0
#define B   A1
#define C   A2

const byte c = 6;             // pixels removed from corners to get right refresh
const byte ht = 11;           // top to bottom lit pixels
const byte wid = 32 - c;
const byte wait = 0;
const byte color = 7;         // blue light is supposed to be a key.
const long int bounce = 220;  // lower is faster bouncy movement
long int start = 0;
long int finish = 0;
int dirx = -1, diry = 1, xf=3, yf=3;

RGBmatrixPanel matrix(A, B, C, CLK, LAT, OE, false);

// setup will report the avg refresh via serial, adjust box params accordingly

void setup() {
  matrix.begin();
  Serial.begin(115200);
  start = millis();
  for (int i=0; i < 100; i++){
    matrix.fillRect(3, 3, wid, ht, matrix.Color333(0, 0, color));
    delay(wait);
    matrix.fillRect(3, 3, wid, ht, matrix.Color333(0, 0, 0));
  }
  finish = millis();
  float avg = (finish - start) / 100;
  Serial.print("avg miliseconds refresh: ");
  Serial.println(avg);
}


void loop() {
  start = millis();

  if ((start - finish) > bounce){
    xf += dirx;
    yf += diry;
    if ((xf >= c) || (xf < 1)){
      dirx = -dirx;
      //diry = random(-1,2);
    }
    if ((yf >= (c-1)) || (yf < 1)){
      diry = -diry;
      //dirx = random(-1,2);
    }
    finish = millis();
  }

  draw(xf, yf);
  // Serial.println(millis() - start);
}

void draw(int x, int y){
  matrix.fillRect(x, y, wid, ht, matrix.Color333(0, 0, color));
  matrix.fillRect(x, y, wid, ht, matrix.Color333(0, 0, 0));
}

